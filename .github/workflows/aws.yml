# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ap-northeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: itorok-backend # set this to your Amazon ECR repository name
  ECS_SERVICE: itorok-service # set this to your Amazon ECS service name
  ECS_CLUSTER: itorok-cluster # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    .aws/task-definition.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    itorok-backend-container # set this to the name of the container in the
    # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create env file
        run: |
          echo "NODE_ENV=$NODE_ENV" >> .env
          echo "PORT=$PORT" >> .env
          echo "DB_NAME=$DB_NAME" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID" >> .env
          echo "KAKAO_REDIRECT_URI=$KAKAO_REDIRECT_URI" >> .env
          echo "SECRET_KEY=$SECRET_KEY" >> .env
          echo "REDIRECT_URI=$REDIRECT_URI" >> .env
          echo "KAKAO_API_URI=$KAKAO_API_URI" >> .env
          echo "NAVER_API_SERVICE_ID=$NAVER_API_SERVICE_ID" >> .env
          echo "NAVER_API_SEVICE_SECRET_KEY=$NAVER_API_SEVICE_SECRET_KEY" >> .env
          echo "NAVER_API_ACCESS_KEY=$NAVER_API_ACCESS_KEY" >> .env
          echo "NAVER_API_SECRET_KEY=$NAVER_API_SECRET_KEY" >> .env
          echo "NAVER_MESSAGE_API_URL=$NAVER_MESSAGE_API_URL" >> .env
          echo "CALLER_NUMBER=$CALLER_NUMBER" >> .env
          echo "AWS_ACCESS_KEY=$AWS_ACCESS_KEY" >> .env
          echo "AWS_SECRET_KEY=$AWS_SECRET_KEY" >> .env
          echo "BUCKET_NAME=$BUCKET_NAME" >> .env
        env:
          NODE_ENV: production
          PORT: '4000'
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: '5432'
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: http://localhost:4000/api/social/callback
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REDIRECT_URI: http://localhost:3000
          KAKAO_API_URI: https://kapi.kakao.com
          NAVER_API_SERVICE_ID: ${{ secrets.NAVER_API_SERVICE_ID }}
          NAVER_API_SEVICE_SECRET_KEY: ${{ secrets.NAVER_API_SEVICE_SECRET_KEY }}
          NAVER_API_ACCESS_KEY: ${{ secrets.NAVER_API_ACCESS_KEY }}
          NAVER_API_SECRET_KEY: ${{ secrets.NAVER_API_SECRET_KEY }}
          NAVER_MESSAGE_API_URL: https://sens.apigw.ntruss.com/sms/v2/services/ncp:sms:kr:270315683300:itorok-class/messages
          CALLER_NUMBER: ${{ secrets.CALLER_NUMBER }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          BUCKET_NAME: itorok-class-bucket

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
